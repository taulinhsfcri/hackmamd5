import pygame
import random
import time
from collections import Counter
from colorama import Fore, Style, init

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# Kh·ªüi t·∫°o pygame ƒë·ªÉ x·ª≠ l√Ω √¢m thanh
pygame.mixer.init()

# T·∫£i t·ªáp √¢m thanh l·∫Øc x√∫c x·∫Øc
dice_sound = pygame.mixer.Sound('c:\\Users\\tailinh\\Downloads\\iLoveTik.com_TikTok_Media_002_610bfa3b30240dcd9542468483f55707.m4a')  # Thay 'dice_roll.wav' b·∫±ng ƒë∆∞·ªùng d·∫´n t·ªáp √¢m thanh c·ªßa b·∫°n

# L∆∞u l·ªãch s·ª≠ k·∫øt qu·∫£
history = []  # L∆∞u l·ªãch s·ª≠ c√°c k·∫øt qu·∫£ t√†i/x·ªâu

def is_valid_md5(md5_hash):
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m√£ MD5"""
    return len(md5_hash) == 32 and all(c in "0123456789abcdefABCDEF" for c in md5_hash)

def analyze_history():
    """Ph√¢n t√≠ch l·ªãch s·ª≠ k·∫øt qu·∫£ T√†i/X·ªâu ƒë·ªÉ t√¨m xu h∆∞·ªõng"""
    if len(history) < 2:
        return "Kh√¥ng ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ ph√¢n t√≠ch."
    
    # Chu·∫©n h√≥a t·∫•t c·∫£ k·∫øt qu·∫£ v·ªÅ ch·ªØ hoa ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ so s√°nh
    history_normalized = [result.upper() for result in history]

    # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa T√†i v√† X·ªâu
    counter = Counter(history_normalized)
    percent_tai = (counter["T√ÄI"] / len(history_normalized)) * 100
    percent_xiu = (counter["X·ªàU"] / len(history_normalized)) * 100
    
    return {
        "percent_tai": round(percent_tai, 2),
        "percent_xiu": round(percent_xiu, 2),
        "history": history_normalized
    }

def generate_outcome_from_md5(md5_hash):
    """T·∫°o k·∫øt qu·∫£ T√†i/X·ªâu t·ª´ MD5 v√† h·ªó tr·ª£ c·∫ßu ng∆∞·ª£c"""
    numeric_value = int(md5_hash[:8], 16)  # L·∫•y 8 k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa MD5
    total = sum([((numeric_value >> (4 * i)) % 6) + 1 for i in range(3)])  # T·ªïng 3 con x√∫c x·∫Øc
    
    # T√≠nh to√°n t·ªïng gi√° tr·ªã c·∫ßu ng∆∞·ª£c n·∫øu c√≥
    reverse_total = sum([int(digit) for digit in str(numeric_value)[:3]])  # C·∫ßu ng∆∞·ª£c t·ª´ ba ch·ªØ s·ªë ƒë·∫ßu ti√™n
    
    return total, reverse_total, "T√†i" if total >= 11 or reverse_total >= 11 else "X·ªâu"

def print_with_effect(text, color=Fore.GREEN):
    """In vƒÉn b·∫£n v·ªõi hi·ªáu ·ª©ng"""
    for char in text:
        print(color + char, end='', flush=True)
        time.sleep(0.01)
    print()

def print_dice_roll():
    """In h√¨nh ·∫£nh m√¥ ph·ªèng x√∫c x·∫Øc v√† con r·ªìng v·ªõi hi·ªáu ·ª©ng l·∫Øc v√† √¢m thanh"""
    dice_faces = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ']
    print(Fore.RED + Style.BRIGHT + """
        L·∫Øc x√∫c x·∫Øc... üé≤üé≤üé≤
    """)
    
    # L·∫Øc x√∫c x·∫Øc 3 l·∫ßn, m·ªói l·∫ßn hi·ªÉn th·ªã x√∫c x·∫Øc ng·∫´u nhi√™n v√† ph√°t √¢m thanh
    for _ in range(3):
        dice_roll = [random.choice(dice_faces) for _ in range(3)]
        print("L·∫Øc: " + ' '.join(dice_roll), end='\r', flush=True)
        dice_sound.play()  # Ph√°t √¢m thanh l·∫Øc x√∫c x·∫Øc
        time.sleep(0.5)  # Th·ªùi gian l·∫Øc
    time.sleep(1)  # Th·ªùi gian ngh·ªâ tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£

def make_prediction(md5_hash, history_analysis):
    """Ph√¢n t√≠ch v√† ƒë∆∞a ra d·ª± ƒëo√°n d·ª±a tr√™n t·∫•t c·∫£ c√°c y·∫øu t·ªë"""
    # T·ª∑ l·ªá T√†i v√† X·ªâu t·ª´ l·ªãch s·ª≠
    percent_tai = history_analysis['percent_tai']
    percent_xiu = history_analysis['percent_xiu']
    
    # K·∫øt qu·∫£ t·ª´ MD5
    total, reverse_total, generated_outcome = generate_outcome_from_md5(md5_hash)

    # Quy·∫øt ƒë·ªãnh d·ª±a tr√™n t·ª∑ l·ªá v√† k·∫øt qu·∫£ MD5
    if percent_tai > percent_xiu:
        if generated_outcome == "T√†i":
            trend_outcome = "T√†i (D·ª± ƒëo√°n ch·∫Øc ch·∫Øn d·ª±a tr√™n l·ªãch s·ª≠ v√† MD5)"
        else:
            trend_outcome = "T√†i (D·ª±a v√†o xu h∆∞·ªõng l·ªãch s·ª≠, nh∆∞ng MD5 l·∫°i cho X·ªâu)"
    else:
        if generated_outcome == "X·ªâu":
            trend_outcome = "X·ªâu (D·ª± ƒëo√°n ch·∫Øc ch·∫Øn d·ª±a tr√™n l·ªãch s·ª≠ v√† MD5)"
        else:
            trend_outcome = "X·ªâu (D·ª±a v√†o xu h∆∞·ªõng l·ªãch s·ª≠, nh∆∞ng MD5 l·∫°i cho T√†i)"
    
    return total, reverse_total, generated_outcome, trend_outcome

def main():
    print(Fore.CYAN + Style.BRIGHT + "Tool D·ª± ƒëo√°n T√†i/X·ªâu")
    print(Fore.CYAN + "=" * 30)
    
    while True:
        md5_input = input(Fore.WHITE + "Nh·∫≠p m√£ MD5 c·∫ßn d·ª± ƒëo√°n (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ").strip()
        
        if md5_input.lower() == 'exit':
            print(Fore.CYAN + "Tho√°t ch∆∞∆°ng tr√¨nh. C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng!")
            break

        if not is_valid_md5(md5_input):
            print(Fore.RED + "M√£ MD5 kh√¥ng h·ª£p l·ªá.")
            continue
        
        # Nh·∫≠p l·ªãch s·ª≠ k·∫øt qu·∫£ c√°c phi√™n tr∆∞·ªõc (T√†i/X·ªâu)
        input_history = input(Fore.WHITE + "Nh·∫≠p k·∫øt qu·∫£ c√°c phi√™n tr∆∞·ªõc (T√†i/X·ªâu) c√°ch nhau b·∫±ng d·∫•u ph·∫©y, v√≠ d·ª•: T√†i, X·ªâu, T√†i: ").strip()
        
        # X·ª≠ l√Ω l·ªãch s·ª≠ ng∆∞·ªùi d√πng nh·∫≠p v√†o
        if input_history:
            input_history = input_history.split(',')
            input_history = [result.strip() for result in input_history]  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        
        # C·∫≠p nh·∫≠t l·ªãch s·ª≠ v·ªõi k·∫øt qu·∫£ nh·∫≠p v√†o
        history.extend(input_history)

        # In hi·ªáu ·ª©ng ph√¢n t√≠ch
        print_with_effect("ƒêang ph√¢n t√≠ch k·∫øt qu·∫£...", Fore.CYAN)
        time.sleep(5)  # Th√™m th·ªùi gian ph√¢n t√≠ch tr∆∞·ªõc khi ra k·∫øt qu·∫£ (5 gi√¢y)

        # Ph√¢n t√≠ch l·ªãch s·ª≠ v√† t·ª∑ l·ªá T√†i/X·ªâu
        history_analysis = analyze_history()
        
        # In x√∫c x·∫Øc v√† con r·ªìng
        print_dice_roll()
        
        # Hi·ªÉn th·ªã t·ª∑ l·ªá T√†i v√† X·ªâu
        print(Fore.YELLOW + f"T·ª∑ l·ªá T√†i: {history_analysis['percent_tai']}%")
        print(Fore.YELLOW + f"T·ª∑ l·ªá X·ªâu: {history_analysis['percent_xiu']}%")
        
        # In c√°c k·∫øt qu·∫£ ph√¢n t√≠ch v√† d·ª± ƒëo√°n
        total, reverse_total, md5_outcome, trend_outcome = make_prediction(md5_input, history_analysis)
        
        # K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c in sau khi ph√¢n t√≠ch xong
        print(Fore.GREEN + f"K·∫øt qu·∫£ d·ª± ƒëo√°n cu·ªëi c√πng: {md5_outcome}")
        print(Fore.GREEN + f"K·∫øt qu·∫£ c·∫ßu ng∆∞·ª£c (t·ª´ ba ch·ªØ s·ªë ƒë·∫ßu c·ªßa MD5): T·ªïng x√∫c x·∫Øc = {total}, C·∫ßu ng∆∞·ª£c = {reverse_total}")
        print(Fore.GREEN + f"K·∫øt qu·∫£ d·ª±a v√†o xu h∆∞·ªõng l·ªãch s·ª≠: {trend_outcome}")
        
        print(Fore.CYAN + f"L·ªãch s·ª≠ k·∫øt qu·∫£: {', '.join(history_analysis['history'])}")
        
        print(Fore.CYAN + "=" * 30)
        time.sleep(30)  # ƒê·ª£i 30 gi√¢y cho ng∆∞·ªùi d√πng quy·∫øt ƒë·ªãnh c∆∞·ª£c

if __name__ == "__main__":
    main() 